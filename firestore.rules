/**
 * @fileoverview Firestore Security Rules for e-Office Productivity Hub
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and streaks,
 * and restricts access to performance reviews based on user and reviewer relationships.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Document ID matches Firebase Auth UID.
 * - /userStreaks/{userId}: Stores user engagement streaks. Document ID matches user's UID.
 * - /performanceReviews/{reviewId}: Stores performance reviews, with access controlled by userId and reviewerId.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user profiles.
 * - Users can only create, read, update, and delete their own user streaks.
 * - Performance reviews can be read by the user being reviewed or the reviewer.
 * - No public listing of user profiles or user streaks is allowed.
 *
 * Denormalization for Authorization:
 *  - User documents contain an 'id' field that must match the document ID and auth.uid for ownership validation.
 *  - PerformanceReview documents contain a 'userId' and 'reviewerId' to enable role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user engagement streak data.
     * @path /userStreaks/{userId}
     * @allow (create) User with UID 'user123' can create their streak data.
     * @allow (get) User with UID 'user123' can read their streak data.
     * @allow (update) User with UID 'user123' can update their streak data.
     * @allow (delete) User with UID 'user123' can delete their streak data.
     * @deny (create) User with UID 'user456' cannot create streak data with ID 'user123'.
     * @principle Enforces document ownership for user streaks.
     */
    match /userStreaks/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to performance review documents.
     * @path /performanceReviews/{reviewId}
     * @allow (get) User with UID 'user123' can read a review where they are the user being reviewed.
     * @allow (get) User with UID 'reviewer456' can read a review they wrote.
     * @deny (get) User with UID 'user789' cannot read a review about 'user123' that they did not write.
     * @principle Allows access to reviews by the user being reviewed or the reviewer.
     */
    match /performanceReviews/{reviewId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.reviewerId == request.auth.uid);
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}