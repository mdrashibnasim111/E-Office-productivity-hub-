/**
 * @fileoverview Firestore Security Rules for the e-Office Productivity Hub application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, combining user-based access for personal data with role-based access for shared resources.
 * Access is predicated on the principle of least privilege, ensuring users can only access what is necessary for their function.
 *
 * Data Structure:
 * - /users/{userId}: Stores profile data, secured with owner-only access.
 * - /userStreaks/{userId}: Stores streak data, secured with owner-only access.
 * - /performanceReviews/{reviewId}: Stores performance reviews, accessible to the reviewed user and the reviewer.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data scraping.
 * - Performance reviews are accessible only to the user being reviewed and the reviewer.
 *
 * Denormalization for Authorization:
 * - The PerformanceReview document includes both `userId` and `reviewerId` to avoid needing to query for related user documents when deciding who can access a review.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'wnY2uujN2FY1B59tkqI6WhOdlL43' can create their own profile if request.auth.uid == userId.
     * @allow (get, update, delete) User 'wnY2uujN2FY1B59tkqI6WhOdlL43' can read/update/delete their own profile.
     * @deny User 'attackerId' cannot create/read/update/delete User 'wnY2uujN2FY1B59tkqI6WhOdlL43' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user streak data. Only the user can read/write their own streak data.
     * @path /userStreaks/{userId}
     * @allow (create) User 'wnY2uujN2FY1B59tkqI6WhOdlL43' can create their own streak data if request.auth.uid == userId.
     * @allow (get, update, delete) User 'wnY2uujN2FY1B59tkqI6WhOdlL43' can read/update/delete their own streak data.
     * @deny User 'attackerId' cannot create/read/update/delete User 'wnY2uujN2FY1B59tkqI6WhOdlL43' streak data.
     * @principle Enforces document ownership for all operations.
     */
    match /userStreaks/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure performance reviews. Only the reviewed user and the reviewer can access a review.
     * @path /performanceReviews/{reviewId}
     * @allow (get) User 'wnY2uujN2FY1B59tkqI6WhOdlL43' can read a review if they are the reviewed user or the reviewer.
     * @allow (create) User 'wnY2uujN2FY1B59tkqI6WhOdlL43' can create a review.
     * @allow (update, delete) User 'wnY2uujN2FY1B59tkqI6WhOdlL43' can update/delete a review if they are the reviewer.
     * @deny User 'attackerId' cannot read/write a review if they are not the reviewed user or reviewer.
     * @principle Enforces role-based access control based on userId and reviewerId fields.
     */
    match /performanceReviews/{reviewId} {
      allow get: if isReviewerOrReviewed(resource.data.reviewerId, resource.data.userId);
      allow list: if isReviewerOrReviewedList();
      allow create: if isSignedIn();
      allow update: if isExistingReviewer(resource.data.reviewerId);
      allow delete: if isExistingReviewer(resource.data.reviewerId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isReviewerOrReviewed(reviewerId, userId) {
        return request.auth.uid == reviewerId || request.auth.uid == userId;
    }

    function isReviewerOrReviewedList() {
        return isSignedIn();
    }

    function isReviewer(reviewerId) {
        return request.auth.uid == reviewerId;
    }

    function isExistingReviewer(reviewerId) {
        return isReviewer(reviewerId) && resource != null;
    }
  }
}