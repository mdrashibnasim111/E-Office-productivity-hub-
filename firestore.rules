/**
 * @fileoverview Firestore Security Rules for the e-Office Productivity Hub application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and streak data,
 * and a combination of ownership and role-based access for performance reviews. It prioritizes
 * preventing unauthorized data access and modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with the document ID matching the Firebase Auth UID.
 * - /userStreaks/{userId}: Stores engagement streak data for each user, with the document ID matching the user's UID.
 * - /performanceReviews/{reviewId}: Stores all performance reviews, accessible based on the review's userId and reviewerId.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and streak information.
 * - Performance reviews can only be created, updated, or delete by the user, or by the manager role.
 * - No user listing is allowed to prevent unauthorized data scraping.
 *
 * Denormalization for Authorization:
 *  The rules rely on the `userId` field in `userStreaks` documents matching the document ID to enforce ownership.
 *  The rules rely on the `userId` and `reviewerId` fields in `performanceReviews` documents matching the request auth UID to enforce ownership or role-based access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list): Authenticated user can read their own profile.
     * @allow (create, update, delete): Authenticated user can create, update, or delete their own profile.
     * @deny (get, list): Authenticated user cannot read other user's profile.
     * @deny (create, update, delete): Authenticated user cannot modify other user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No user listing allowed

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user streak documents.
     * @path /userStreaks/{userId}
     * @allow (get, list): Authenticated user can read their own streak data.
     * @allow (create, update, delete): Authenticated user can create, update, or delete their own streak data.
     * @deny (get, list): Authenticated user cannot read other user's streak data.
     * @deny (create, update, delete): Authenticated user cannot modify other user's streak data.
     * @principle Enforces document ownership for all operations.
     */
    match /userStreaks/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No user listing allowed

      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isSignedIn() && isOwner(userId) ;
      allow delete: if isSignedIn() && isOwner(userId) ;
    }

    /**
     * @description Controls access to performance review documents.
     * @path /performanceReviews/{reviewId}
     * @allow (get, list): Authenticated user can read their own reviews (either self-assessment or received feedback).
     * @allow (create): Authenticated user can create a self-assessment for themselves or a manager can create feedback for a user.
     * @allow (update, delete): Authenticated user can update/delete their own self-assessment or a manager can update/delete feedback they provided.
     * @deny (get, list): Authenticated user cannot read other user's performance reviews, unless they are a manager.
     * @deny (create, update, or delete): Authenticated user cannot create, update, or delete performance reviews they don't own.
     * @principle Combines document ownership and role-based access for fine-grained control.
     */
    match /performanceReviews/{reviewId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.reviewerId == request.auth.uid);
      allow list: if false; // No listing for perf reviews

      allow create: if isSignedIn() && (request.resource.data.userId == request.auth.uid || request.resource.data.reviewerId == request.auth.uid);
      allow update: if isSignedIn() && (request.resource.data.userId == request.auth.uid || request.resource.data.reviewerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.reviewerId == request.auth.uid);
    }
  }
}