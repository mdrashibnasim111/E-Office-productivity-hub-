/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and user streaks,
 *              and limits access to performance reviews based on the reviewer/reviewee relationship.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with the document ID matching the Firebase Auth UID.
 * - /userStreaks/{userId}: Stores user engagement streak data, with the document ID matching the Firebase Auth UID.
 * - /performanceReviews/{reviewId}: Stores performance reviews.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Users can only read and write their own streak data under /userStreaks/{userId}.
 * - Listing of users is disallowed.
 * - Performance reviews can only be listed by the reviewer and reviewee, get permission is open for all.
 * - The system uses denormalization to avoid costly `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure the /users/{userId} collection. Only the authenticated user can read/write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the /userStreaks/{userId} collection. Only the authenticated user can read/write their own streak data.
     * @path /databases/{database}/documents/userStreaks/{userId}
     * @allow (create) User with UID 'user123' can create their own streak data if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their own streak data.
     * @allow (update) User with UID 'user123' can update their own streak data.
     * @allow (delete) User with UID 'user123' can delete their own streak data.
     * @deny (create) User with UID 'user456' cannot create streak data with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read the streak data of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the streak data of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the streak data of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /userStreaks/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the /performanceReviews/{reviewId} collection.
     *              Allows any user to read a review (get), but limits listing to either the reviewer or the user being reviewed.
     *              Write access is restricted to the reviewer and reviewee.
     * @path /databases/{database}/documents/performanceReviews/{reviewId}
     * @allow (get) Any authenticated user can get any review.
     * @allow (create) A user can create a review if they are the reviewer.
     * @allow (update) A user can update a review if they are the reviewer or the reviewee and the document exists.
     * @allow (delete) A user can delete a review if they are the reviewer and the document exists.
     * @deny (create) A user cannot create a review if they are not the reviewer.
     * @deny (update) A user cannot update a review if they are neither the reviewer nor the reviewee or if the document does not exist.
     * @deny (delete) A user cannot delete a review if they are not the reviewer or if the document does not exist.
     * @principle Limits access based on the reviewer/reviewee relationship and document existence.
     */
    match /performanceReviews/{reviewId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isReviewer(reviewId) {
          return request.auth.uid == get(/databases/$(database)/documents/performanceReviews/$(reviewId)).data.reviewerId;
      }

      function isReviewee(reviewId) {
          return request.auth.uid == get(/databases/$(database)/documents/performanceReviews/$(reviewId)).data.userId;
      }

      function isExistingReviewer(reviewId) {
          return isSignedIn() && isReviewer(reviewId) && exists(resource);
      }

       function isExistingReviewee(reviewId) {
          return isSignedIn() && isReviewee(reviewId) && exists(resource);
      }

      allow get: if true;
      allow list: if isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.reviewerId == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isExistingReviewer(reviewId) || isExistingReviewee(reviewId);
      allow delete: if isExistingReviewer(reviewId);
    }
  }
}