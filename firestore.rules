/**
 * @fileoverview Firestore Security Rules for the e-Office Productivity Hub application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and streaks, and admin-only access for projects.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with the document ID matching the Firebase Auth UID.
 * - /userStreaks/{userId}: Stores individual user streaks data, with the document ID matching the Firebase Auth UID.
 * - /projects/{projectId}: Stores project data, accessible only by admins.
 * - /performanceReviews/{reviewId}: Stores performance review data, accessible by the user being reviewed or an admin.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and streaks.
 * - Project data is only readable by authenticated users and writable only by users with the 'admin' claim.
 * - Performance Reviews are readable by the user being reviewed.
 * - Listing of users and streaks is not allowed.
 *
 * Denormalization for Authorization:
 * N/A (Authorization is based on user IDs and admin claims).
 *
 * Structural Segregation:
 * N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and their UID matches the userId.
     * @deny (read, write) if the user is not signed in or their UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //function
      function isSignedIn() {
        return request.auth != null;
      }
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user streak data.
     * @path /userStreaks/{userId}
     * @allow (read, write) if the user is signed in and their UID matches the userId.
     * @deny (read, write) if the user is not signed in or their UID does not match the userId.
     * @principle Enforces document ownership for user streaks.
     */
    match /userStreaks/{userId} {
      //function
      function isSignedIn() {
        return request.auth != null;
      }
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to project data.
     * @path /projects/{projectId}
     * @allow (read) if the user is signed in.
     * @allow (write) if the user is signed in and has the 'admin' claim set to true.
     * @deny (write) if the user is not signed in or does not have the 'admin' claim.
     * @principle Enforces admin-only access for project data modification.
     */
    match /projects/{projectId} {
        //function
        function isSignedIn() {
          return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.admin == true;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

        /**
         * @description Controls access to performance review data.
         * @path /performanceReviews/{reviewId}
         */
        match /performanceReviews/{reviewId} {
            //function
            function isSignedIn() {
              return request.auth != null;
            }

            function isAdmin() {
                return request.auth.token.admin == true;
            }

            function isReviewForUser(userId) {
                return resource.data.userId == userId;
            }

            allow get: if isSignedIn() && (isReviewForUser(request.auth.uid) || isAdmin());
            allow list: if false;
            allow create: if isSignedIn() && isAdmin(); // Only admins can create reviews
            allow update: if isSignedIn() && isAdmin(); // Only admins can update reviews
            allow delete: if isSignedIn() && isAdmin(); // Only admins can delete reviews
        }
  }
}