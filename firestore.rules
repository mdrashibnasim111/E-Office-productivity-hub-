/**
 * @file Firestore Security Rules for e-Office Productivity Hub
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data
 * and allows for public read access to organization-level data. It leverages role-based
 * access control for certain operations and ensures that only authenticated users can
 * access the application's resources. Data validation is relaxed for prototyping but
 * enforces key relationships.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles, with userId matching the Firebase Auth UID.
 * - /users/{userId}/tasks/{taskId}: Stores tasks assigned to a specific user.
 * - /teams/{teamId}: Stores team information.
 * - /organizations/{organizationId}: Stores organization-level information (singleton).
 * - /goals/{goalId}: Stores goals at organization, team, or individual levels.
 * - /kpis/{kpiId}: Stores KPIs associated with goals.
 * - /audit_logs/{auditLogId}: Stores audit log entries.
 * - /productivity_scores/{productivityScoreId}: Stores productivity scores.
 *
 * @key_security_decisions
 * - User listing is implicitly denied.
 * - Public read access is granted to the /organizations collection.
 * - Write access to user-specific data is restricted to the authenticated user.
 * - Owner-only access is enforced for user-owned resources such as tasks.
 *
 * @denormalization_for_authorization
 * - User roles are stored directly within the /users/{uid} document to avoid
 *   `get()` calls in security rules.
 *
 * @structural_segregation
 * - User-specific data is stored under the /users/{userId} path to ensure
 *   clear ownership and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document if request.auth.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their profile document.
     * @allow (update) User with UID 'user_abc' can update their own profile document.
     * @allow (delete) User with UID 'user_abc' can delete their own profile document.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document for 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the profile document for 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile document for 'user_abc'.
     * @principle Enforces document ownership for writes and allows owner to read.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to tasks assigned to a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'user_abc' can create a task under their profile.
     * @allow (get) User with UID 'user_abc' can read a task under their profile.
     * @allow (update) User with UID 'user_abc' can update a task under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a task under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a task under 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a task under 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a task under 'user_abc'.
     * @principle Enforces document ownership for writes and allows owner to read.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to team information.
     * @path /teams/{teamId}
     * @allow (get) Any authenticated user can read team information.
     * @deny (create) Only authenticated users can create teams.
     * @deny (update) Only authenticated users can update teams.
     * @deny (delete) Only authenticated users can delete teams.
     * @principle Allows read-only access and requires authentication for write operations.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();  // TODO: Add more restrictive rules based on roles.
      allow update: if isSignedIn();  // TODO: Add more restrictive rules based on roles.
      allow delete: if isSignedIn();  // TODO: Add more restrictive rules based on roles.
    }

    /**
     * @description Controls access to organization-level information.
     * @path /organizations/{organizationId}
     * @allow (get) Any user can read organization information.
     * @deny (create) No user can create an organization.
     * @deny (update) No user can update organization information.
     * @deny (delete) No user can delete organization information.
     * @principle Allows public read access but restricts write operations.
     */
    match /organizations/{organizationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // Only the backend can create the organization.
      allow update: if false; // Only the backend can update the organization.
      allow delete: if false; // Only the backend can delete the organization.
    }

    /**
     * @description Controls access to goals at organization, team, or individual levels.
     * @path /goals/{goalId}
     * @allow (get) Any authenticated user can read goal information.
     * @deny (create) Only authenticated users can create goals.
     * @deny (update) Only authenticated users can update goals.
     * @deny (delete) Only authenticated users can delete goals.
     * @principle Allows read-only access and requires authentication for write operations.
     */
    match /goals/{goalId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();  // TODO: Add more restrictive rules based on roles or ownership.
      allow update: if isSignedIn();  // TODO: Add more restrictive rules based on roles or ownership.
      allow delete: if isSignedIn();  // TODO: Add more restrictive rules based on roles or ownership.
    }

    /**
     * @description Controls access to Key Performance Indicators associated with goals.
     * @path /kpis/{kpiId}
     * @allow (get) Any authenticated user can read KPI information.
     * @deny (create) Only authenticated users can create KPIs.
     * @deny (update) Only authenticated users can update KPIs.
     * @deny (delete) Only authenticated users can delete KPIs.
     * @principle Allows read-only access and requires authentication for write operations.
     */
    match /kpis/{kpiId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();  // TODO: Add more restrictive rules based on roles or goal ownership.
      allow update: if isSignedIn();  // TODO: Add more restrictive rules based on roles or goal ownership.
      allow delete: if isSignedIn();  // TODO: Add more restrictive rules based on roles or goal ownership.
    }

    /**
     * @description Controls access to audit log entries.
     * @path /audit_logs/{auditLogId}
     * @allow (get) Any authenticated user can read audit log entries.
     * @deny (create) No user can create audit log entries.
     * @deny (update) No user can update audit log entries.
     * @deny (delete) No user can delete audit log entries.
     * @principle Allows read-only access but restricts write operations.
     */
    match /audit_logs/{auditLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn(); // TODO: Add more restrictive rules based on roles.
      allow list: if isSignedIn(); // TODO: Add more restrictive rules based on roles.
      allow create: if false; // Only the backend can create audit logs.
      allow update: if false; // Audit logs should not be updated.
      allow delete: if false; // Audit logs should not be deleted.
    }

    /**
     * @description Controls access to productivity scores for users, teams, and organizations.
     * @path /productivity_scores/{productivityScoreId}
     * @allow (get) Any authenticated user can read productivity scores.
     * @deny (create) Only authenticated users can create productivity scores.
     * @deny (update) Only authenticated users can update productivity scores.
     * @deny (delete) Only authenticated users can delete productivity scores.
     * @principle Allows read-only access and requires authentication for write operations.
     */
    match /productivity_scores/{productivityScoreId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn(); // TODO: Add more restrictive rules based on roles.
      allow list: if isSignedIn(); // TODO: Add more restrictive rules based on roles.
      allow create: if isSignedIn();  // TODO: Add more restrictive rules based on roles or ownership.
      allow update: if isSignedIn();  // TODO: Add more restrictive rules based on roles or ownership.
      allow delete: if isSignedIn();  // TODO: Add more restrictive rules based on roles or ownership.
    }
  }
}