/**
 * @file Firestore Security Rules for the e-Office Productivity Hub.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles
 *   and allows read-only access to roles and departments. User documents are secured
 *   using path-based authorization, ensuring only the authenticated user can create,
 *   update, or delete their own profile.
 *
 * @data_structure
 *   - `/users/{userId}`: Stores individual user profiles, with `userId` matching the
 *     Firebase Auth UID. Each user document includes `roleId` and `departmentId` for
 *     authorization purposes.
 *   - `/roles/{roleId}`: Stores role definitions (e.g., Admin, Manager, Employee).
 *     These are intended to be read-only by the application.
 *   - `/departments/{departmentId}`: Stores department information (e.g., Finance, HR, IT).
 *     These are intended to be read-only by the application.
 *
 * @key_security_decisions
 *   - **User Listing Disabled**: Listing all user documents is explicitly denied to prevent
 *     unauthorized access to user data.
 *   - **Roles and Departments Read-Only**: The `/roles` and `/departments` collections
 *     are configured for public read access (`get`, `list`) but are write-protected.
 *   - **Authorization Independence**: User documents denormalize `roleId` and
 *     `departmentId` to avoid costly `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can manage their own data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a profile with id: 'user123'.
     * @allow (update) User with UID 'user123' updates their own profile.
     * @allow (delete) User with UID 'user123' deletes their own profile.
     * @deny (create) User with UID 'user456' tries to create a profile with id: 'user123'.
     * @deny (update) User with UID 'user456' tries to update the profile of user 'user123'.
     * @deny (delete) User with UID 'user456' tries to delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes and validates relational integrity between the path and the document's ID.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's UID matches the requested userId.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       // Helper function to check if the authenticated user is the owner and the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows users to read their own profile data.
      allow get: if isOwner(userId);

      // Prevents listing of all user documents.
      allow list: if false;

      // Allows a user to create their own profile if the UID matches the document ID and the userId.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allows a user to update their own profile if the UID matches the document ID, and enforces immutability for the ID.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allows a user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to role definitions while preventing any modifications.
     * @path /roles/{roleId}
     * @allow (get) Any user can read a role definition.
     * @allow (list) Any user can list role definitions.
     * @deny (create) No one can create role definitions through the client.
     * @deny (update) No one can update role definitions through the client.
     * @deny (delete) No one can delete role definitions through the client.
     * @principle Provides public read access to roles while restricting write access to prevent unauthorized modifications.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to department information while preventing any modifications.
     * @path /departments/{departmentId}
     * @allow (get) Any user can read department information.
     * @allow (list) Any user can list department information.
     * @deny (create) No one can create departments through the client.
     * @deny (update) No one can update departments through the client.
     * @deny (delete) No one can delete departments through the client.
     * @principle Provides public read access to departments while restricting write access to prevent unauthorized modifications.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}